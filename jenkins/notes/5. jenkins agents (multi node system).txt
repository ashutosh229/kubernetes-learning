we dont do everything on the single jenkins server 

in the industry, there is a jenkins server which acts as the master 
there are other servers/nodes which acts as slaves 
these slaves, when ordered by the master, perform the jobs 
therefore, the job is not performed by jenkins but the slave nodes
which means we write the jobs on slave nodes 
this is called the master slave architecture

the jenkins master machine need to have jenkins and java both 
the jenkins agent machine need to have java for running jenkins but dont need jenkins 

the connection between the jenkins master and the slave is maintained via ssh
the ssh connection between two devices is done via the private and public key 
we generate the keys on the master device 
keep the private key on the master device 
transfer the public key on the slave device
if we do not do these then the jenkins master will not be able to launch the slave because there will be no authorization 

node creation in jenkins master:
the master itself creates the slave nodes for itself 
node creation involves multiple steps:
name of the node
type of the node (permanent node or not)
description of the node 
number of executors (number of jobs which can run in it at once)
remote root directory (if any references are made during the build to the directory, then this will be treated as the root)
label (this is basically written after the agent component in the pipeline)
usage (usage intensity of the node)
launch method (method via which connection is made to the slave from the master)
 -launch via connecting it to the controller 
 -launch via connecting it to the ssh (we will use this)
   -host: ip of the host or the server on which the slave is hosted
   -credentials: basically the keys via which the connection will be made 
     -add the credentials and keep the type as jenkins 
     -domain: keep it as global credentials 
     -kind: ssh username with private key 
        -scope: keep it as default 
        -id: give it a unique id 4
        -description: describe it 
        -username: username of the master machine 
        -private key: provide the secret key of the master 
    -host key verification strategy: can keep anything depending on the security levels
availability: availability of the node or slave machine 
properties of the slave: these are some of the properties which you should see 

directory operations while running jobs:
when some build is triggered, then in the home directory, workspace folder is created 
in the workspace folder, the folder with the name of the job is created whose build is triggered 
for any directory operations in the build, this folder is considered as the root 
the home directory for the build is configured by default on the master machine (we can though change it)
the home directory for the build is configured customly on the slave machine while making the slave node 
the workspace folder is created once only
the job folder is created for the 1st build only and after that only operations are performed on it as the root directory

the label which we mentioned while creating the slave node is very important 
when we write the pipelines in the master machine, we have to declare which agent will run the pipeline 
the label of the slave node or the agent helps us to declare it 
syntax: pipeline {
    agent {label: "vinod"}
    stages{
        stage{
            steps{
                sh "mkdir -p trial"
            }
        }
    }
}











